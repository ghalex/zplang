import { type Api } from '@/api'
import clc from 'cli-color'
import { Command } from 'commander'
import prompts from 'prompts'
import * as fs from 'node:fs'
import * as path from 'node:path'

const program = new Command('execute')

export default (config: any, api: Api) => {
  program
    .description('Execute a zplang file and display the orders generated by the code')
    .option('-f, --file <name>', 'file to execute')
    .option('-o, --output [output]', 'output file')
    .action(async (opts) => {

      // const data = await api.data.get('AAPL', 2)
      // console.log(data)

      try {
        const { file, output } = opts
        console.log(clc.cyanBright(`→ Executing file: `) + clc.underline(file) + '\n')

        const code = api.code.readCode(file)
        const requirements = api.code.getSymbols(code, [])
        const missing: string[] = []

        let bars = {}

        for (const s of requirements.symbols) {
          const cachedData = await api.data.get(s, requirements.maxWindow)
          
          if (cachedData.length === 0) {
            missing.push(s)
          } else {
            bars[s] = cachedData
          }
        }

        if (missing.length > 0) {
          console.log(`You need to download data for the following symbols: [ ${clc.bold.green(missing.join(', '))} ]`)

          const response = await prompts({
            type: 'toggle',
            name: 'value',
            message: 'Do you want to download the missing data?',
            initial: true,
            active: 'yes',
            inactive: 'no'
          })

          if (response.value) {
            const data = await api.data.download(missing, requirements.maxWindow)
            bars = { ...bars, ...data }
          }
        }

        
        const { portfolio, time, stdout } = api.code.runCode(code, bars)

        console.log(`${clc.green('✔ Success:')} Code was executed successfully`)
        console.log(`${clc.green('✔ Execution time:')} ${clc.bold(time.toFixed(2))} seconds\n`)

        if (output) {
          const filePath = path.join(process.cwd(), output)
          console.log(clc.cyanBright(`→ Saving orders to file: `) + clc.underline(filePath) + '\n')
          fs.writeFileSync(filePath, JSON.stringify(portfolio.orders, null, 2))
          console.log(`${clc.green('✔ Success:')} Orders saved successfully\n`)
        }
        
        console.log(stdout.split('\n').map(l => clc.xterm(8) (l)).join('\n') + '\n')
        console.dir(portfolio.orders, { depth: null, colors: true })
        

      } catch (e: any) {
        console.error(clc.red(`Error: ${e.message}`))
      }

    })

  return program
}