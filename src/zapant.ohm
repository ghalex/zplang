Zapant {
    Program = Stmt+

    Stmt (statement)
        = "(" (id | signs) ":" Exp* ")"             --fnCall
        | "(" fn ListArgs ":" Block ")"				--fnDec 
        | "(" def id ":" (Stmt | Exp) ")"           --varDec
        | Exp

    Block = Stmt+

    Exp
        = Condition relop Condition                 --binary
        | Condition

    Condition
        = Exp ("+" | "-") Term                      --binary
        | Term

    Term
        = Term ("*" | "/" | "%") Factor             --binary
        | Factor

    Factor
        = Primary "**" Factor                       --binary
        | Primary

    Primary
        = Stmt_fnCall
        | List
        | strlit
        | floatlit
        | intlit
        | boolean
        | Var

    List = "[" listOf<Exp, " "> "]"
    ListArgs = "[" listOf<id, " "> "]"
    Var = id

    def = "def" ~alnum
    if = "if" ~alnum
    fn = "fn" ~alnum
    loop = "loop" ~alnum
    in = "in" ~alnum
    true = "true" ~alnum
    false = "false" ~alnum
    keywords
        = def
        | if
        | fn
        | loop
        | in
        | true
        | false

    strlit = "\"" char* "\""
    char = ~"\"" ~"\n"  any
    boolean = true | false
    intlit = ("+" | "-")* digit+
    floatlit = digit+ "." digit+
    id = ~keywords letter idchar*
    idchar = letter | digit | "_"
    relop = "<=" | "<" | "==" | "!=" | ">=" | ">"    
    signs = "_" | "+" | "-" | "/" | "*" | ">" | "<" | ">=" | "<=" | "=" | "!" | "?" | "~"

    eol = "\n" | "\r"
    comment = "//" (~eol any)* eol*
    space += comment
}